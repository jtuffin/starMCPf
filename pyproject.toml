[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-framework"
version = "0.1.0"
description = "Opinionated MCP Framework for AWS Lambda deployment"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "MCP Framework Team", email = "team@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastmcp>=0.1.0",
    "pydantic>=2.0.0",
    "boto3>=1.26.0",
    "aioboto3>=11.0.0",
    "structlog>=23.0.0",
    "python-json-logger>=2.0.0",
    "aiohttp>=3.8.0",
    "asyncio>=3.4.3",
    "typing-extensions>=4.5.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "boto3-stubs[lambda,apigatewayv2,secretsmanager,logs,xray]>=1.26.0",
]

local = [
    "uvicorn>=0.20.0",
    "fastapi>=0.100.0",
]

[project.scripts]
mcp-framework = "mcp_framework.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
mcp_framework = ["templates/**/*", "examples/**/*"]

[tool.black]
line-length = 100
target-version = ['py39']

[tool.ruff]
line-length = 100
select = ["E", "F", "I", "N", "W", "B", "Q"]
ignore = ["E501"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-v --cov=mcp_framework --cov-report=term-missing"